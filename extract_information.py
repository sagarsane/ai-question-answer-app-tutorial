from pymongo import MongoClient
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import MongoDBAtlasVectorSearch
from langchain.document_loaders import DirectoryLoader
from langchain.llms import OpenAI
from langchain.chains import RetrievalQA
import gradio as gr
from gradio.themes.base import Base
from mongo_setup import collection
import key_param


embeddings = OpenAIEmbeddings( openai_api_key=key_param.openai_api_key)

vectorStore = MongoDBAtlasVectorSearch(collection, embeddings)

def query_data(query):
    # get docs using vectorStore similarity search
    docs = vectorStore.similarity_search(query, K=1)
    as_output = docs[0].page_content

    llm = OpenAI( openai_api_key=key_param.openai_api_key, temperature=0)
    retriever = vectorStore.as_retriever()
    qa = RetrievalQA.from_chain_type(llm, chain_type="stuff", retriever=retriever)
    retriever_output = qa.run(query)

    return as_output, retriever_output


with gr.Blocks(theme=Base(), title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown(
        """
        # Question Answering App using Atlas Vector Search + RAG
        This app demonstrates how to build a question answering system using vector search and RAG.
        """
    )
    textbox = gr.Textbox(label="Enter your Question:")
    with gr.Row():
        button = gr.Button("Submit", variant="primary")
    with gr.Column():
        # two outputs, output1 and output2 as Textboxes with first label for just Atlas Vector Search and other label "generated by chaining Atlas Vector Search"
        output1 = gr.Textbox(label="Output with just Atlas Vector Search (returns text field as is):", lines=1, max_lines=10)
        output2 = gr.Textbox(label="Output generated by chaining Atlas Vector Search to Langchain's RetrieverQA + OpenAI LLM:", lines=1, max_lines=10)
    button.click(query_data, textbox, outputs=[output1, output2])

demo.launch()